generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId         String?
  stripeCurrentPeriodEnd DateTime?

  inboxes     Inbox[]
  domains     Domain[]
  accounts    Account[]
  sessions    Session[]
}

model Inbox {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  status    InboxStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  domainId  String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model Domain {
  id           String   @id @default(cuid())
  name         String   @unique
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  inboxes      Inbox[]
}

enum InboxStatus {
  ACTIVE
  ARCHIVED
  SUSPENDED
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}